<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>练习3,用键盘操纵坦克移动</title>
      <link href="/2024/10/28/homeWork3/"/>
      <url>/2024/10/28/homeWork3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 获取坦克标签</span></span><br><span class="line"><span class="keyword">let</span> tank = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mytank&quot;</span>);</span><br><span class="line"><span class="comment">// 设置监听器监视键盘行为</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取坦克当前位置</span></span><br><span class="line">    <span class="comment">//获取坦克的css样式</span></span><br><span class="line">    <span class="keyword">let</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(tank);</span><br><span class="line">    <span class="comment">//获取坦克top和left，并强转为number类型</span></span><br><span class="line">    <span class="keyword">let</span> top = <span class="built_in">parseInt</span>(style.<span class="title function_">getPropertyValue</span>(<span class="string">&quot;top&quot;</span>));</span><br><span class="line">    <span class="keyword">let</span> left = <span class="built_in">parseInt</span>(style.<span class="title function_">getPropertyValue</span>(<span class="string">&quot;left&quot;</span>));</span><br><span class="line">    <span class="comment">// 根据按键移动坦克</span></span><br><span class="line">    <span class="comment">//通过图片相对位置来限制坦克的移动</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;w&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//修改坦克的图片达到旋转的效果</span></span><br><span class="line">        tank.<span class="property">src</span> = <span class="string">&quot;images/up.png&quot;</span>;</span><br><span class="line">        <span class="comment">//通过对样式的修改达到移动的效果</span></span><br><span class="line">        tank.<span class="property">style</span>.<span class="property">top</span> = (top - <span class="number">10</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;s&quot;</span>) &#123;</span><br><span class="line">        tank.<span class="property">src</span> = <span class="string">&quot;images/down.png&quot;</span>;</span><br><span class="line">        tank.<span class="property">style</span>.<span class="property">top</span> = (top + <span class="number">10</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">        tank.<span class="property">src</span> = <span class="string">&quot;images/left.png&quot;</span>;</span><br><span class="line">        tank.<span class="property">style</span>.<span class="property">left</span> = (left - <span class="number">10</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;d&quot;</span>) &#123;</span><br><span class="line">        tank.<span class="property">src</span> = <span class="string">&quot;images/right.png&quot;</span>;</span><br><span class="line">        tank.<span class="property">style</span>.<span class="property">left</span> = (left + <span class="number">10</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="图片加载缓慢，没加载完成时坦克不会转向"><a href="#图片加载缓慢，没加载完成时坦克不会转向" class="headerlink" title="图片加载缓慢，没加载完成时坦克不会转向"></a>图片加载缓慢，没加载完成时坦克不会转向</h2><h3 id="指导手册，wsad-移动"><a href="#指导手册，wsad-移动" class="headerlink" title="指导手册，wsad 移动"></a>指导手册，wsad 移动</h3><style type="text/css">input {    font-size: 26px;    margin-top: 20px;}#map {    height: 640px;    width: 640px;    background-image: url(https://t.tutu.to/img/ibDm);}    #mytank {        position: relative;        left: 10px;        top: 100px;}</style><div id="map">    <img id="mytank" src="https://t.tutu.to/img/tvzP"/></div><script>    // 获取坦克标签    let tank = document.getElementById("mytank");    // 设置监听器监视键盘行为    document.addEventListener('keypress', function (e) {        // 获取坦克当前位置        //获取坦克的css样式        let style = window.getComputedStyle(tank);        //获取坦克top和left，并强转为number类型        let top = parseInt(style.getPropertyValue("top"));        let left = parseInt(style.getPropertyValue("left"));        // 根据按键移动坦克        if (e.key === "w" && top > 0 ) {            //修改坦克的图片达到旋转的效果            tank.src = "https://t.tutu.to/img/iwsX";            //通过对样式的修改达到移动的效果            tank.style.top = (top - 10) + "px";        } else if (e.key === "s" && top < 560 ) {            tank.src = "https://t.tutu.to/img/ixhj";            tank.style.top = (top + 10) + "px";        } else if (e.key === "a" && left > -280 ) {            tank.src = "https://t.tutu.to/img/tdFA";            tank.style.left = (left - 10) + "px";        } else if (e.key === "d" && left < 280 ) {            tank.src = "https://t.tutu.to/img/tvzP";            tank.style.left = (left + 10) + "px";        }    });</script>    ]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业2,使用DOM简单操控页面</title>
      <link href="/2024/10/28/except2/"/>
      <url>/2024/10/28/except2/</url>
      
        <content type="html"><![CDATA[<head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>判断用户名</title></head><style type="text/css">        html, div, ul, li {            margin: 0;            padding: 0;        }        a {            cursor: pointer;        }        li {            list-style: none;            cursor: pointer;        }        #cont_left {            width: 300px;            height: 500px;            float: left;        }</style><div id="cont_left">    <ul><a onclick="show('menu1')"><img src="https://t.tutu.to/img/tQO5"> 通过DOM获取信息 </a>        <ul id="menu1" style="display: none">            <li onclick="showImg()"><img src="https://t.tutu.to/img/t3Ir">获取原始图片路径</li>            <li onclick="getFruit()"><img src="https://t.tutu.to/img/t3Ir">获取我喜欢的水果</li>        </ul>    </ul>    <ul><img src="https://t.tutu.to/img/tQO5"><a onclick="show('menu2')"> 通过DOM操作元素 </a>        <ul id="menu2" style="display: none">            <li onclick="createImg()"><img src="https://t.tutu.to/img/t3Ir">创建图片</li>            <li onclick="cloneImg()"><img src="https://t.tutu.to/img/t3Ir">克隆图片</li>            <li onclick="changeImg()"><img src="https://t.tutu.to/img/t3Ir">改变图片</li>            <li onclick="removeImg()"><img src="https://t.tutu.to/img/t3Ir">删除图片</li>        </ul>    </ul>    <ul><img src="https://t.tutu.to/img/tQO5"><a onclick="show('menu3')"> 通过DOM操作样式 </a>        <ul id="menu3" style="display: none">            <li onclick="changeCss1()"><img src="https://t.tutu.to/img/t3Ir">为原始图片加上行间样式</li>            <li onclick="changeCss2()"><img src="https://t.tutu.to/img/t3Ir">为所有的fieldset加上内部样式</li>        </ul>    </ul></div><fieldset>    <legend>原始图片</legend>    <img class="fruit" id="fruit" src="https://t.tutu.to/img/ttqG"></fieldset><fieldset>    <legend>图片路径</legend>    <p id="msg1">在这里显示</p></fieldset><fieldset>    <legend>选择你喜欢的水果</legend>    <ul style="text-align: left;">        <li style="float: left">            <input name="enjoy" type="checkbox" value="苹果"/>苹果        </li>        <li style="float: left">            <input name="enjoy" type="checkbox" value="香蕉" checked="checked"/>香蕉        </li>        <li style="float: left">            <input name="enjoy" type="checkbox" value="葡萄"/>葡萄        </li>        <li style="float: left">            <input name="enjoy" type="checkbox" value="梨" checked="checked"/>梨        </li>        <li style="float: left">            <input name="enjoy" type="checkbox" value="西瓜"/>西瓜        </li>    </ul>    <div id="msg2" style="margin-top: 10px;text-align: left;"></div></fieldset><fieldset>    <legend>创建图片</legend>    <div id="msg3"></div></fieldset><fieldset>    <legend>克隆图片</legend>    <div id="msg4"></div></fieldset><script>//菜单收缩与扩展    function show(menuId) {        const menu = document.getElementById(menuId);        const allMenus = document.querySelectorAll('#cont_left ul ul');        allMenus.forEach(function (m) {            if (m !== menu) {                m.style.display = 'none';            }        });        menu.style.display = (menu.style.display === 'block' ? 'none' : 'block');    }//219971147 朱良桂    //获取原始图片路径    function showImg() {        //获取路径        //将路径在页面展示        document.getElementById("msg1").innerHTML = document.getElementById("fruit").getAttribute("src");    }    //获取喜欢的水果    function getFruit() {        //用数组来存        const enjoys = [];        //获取复选框的被选中的选项        const checkboxes = document.querySelectorAll('input[name="enjoy"]:checked');        //遍历并去除选项的值        checkboxes.forEach(function (checkbox) {            enjoys.push(checkbox.value);        });        //将路径在页面展示        document.getElementById("msg2").innerHTML = enjoys    }    //创建图片    function createImg() {        // 创建一个新的img元素        const img = document.createElement('img');        // 设置img元素的src属性        img.src = 'https://t.tutu.to/img/tcQB';        // 获取id为msg3的元素        const msg3 = document.getElementById('msg3');        // 用新创建的img元素替换id为msg3的元素        msg3.parentNode.replaceChild(img, msg3);    }    //克隆图片    function cloneImg() {        // 克隆一个新的元素        const img = document.getElementById('fruit');        const newImg = img.cloneNode()        // 获取id为msg3的元素        const msg4 = document.getElementById('msg4');        // 用克隆的元素替换id为msg3的元素        msg4.parentNode.replaceChild(newImg, msg4);    }    //改变图片    function changeImg() {        // 创建一个新的img元素        const img = document.createElement('img');        // 设置img元素的src属性        img.src = 'https://t.tutu.to/img/tcQB';        // 获取id为fruit的元素        const fruit = document.getElementById('fruit');        // 用新创建的img元素替换id为msg3的元素        fruit.parentNode.replaceChild(img, fruit);    }    //删除图片    function removeImg() {        // 获取id为fruit的元素        const fruit = document.getElementById('fruit');        //删除节点        fruit.parentNode.removeChild(fruit)    }    //操作样式1    function changeCss1() {        // 获取id为fruit的元素        const fruit = document.getElementById('fruit');        fruit.style = "border: 5px solid aqua"    }    //操作样式2    function changeCss2() {        const fieldsets = document.getElementsByTagName("fieldset");        for (let fieldset of fieldsets) {            fieldset.style = "backGround: green"        }    }</script>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2,3的学习笔记</title>
      <link href="/2024/05/27/vue2-3Security/"/>
      <url>/2024/05/27/vue2-3Security/</url>
      
        <content type="html"><![CDATA[<h2 id="vue的使用步骤"><a href="#vue的使用步骤" class="headerlink" title="vue的使用步骤"></a>vue的使用步骤</h2><ol><li>准备容器 (Vue所管理的范围)</li><li>引包 (开发版本包 &#x2F; 生产版本包) 官网</li><li>创建实例</li><li>添加配置项 &#x3D;&gt;完成渲染</li></ol><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter 函数"></a>filter 函数</h3><p>filter是一个操作函数，用于筛选数组中的元素，返回剩下的元素，它会遍历筛选集合中的元素，再根据表达式的值为true或者false来选择是否保留<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.taskList = this.taskList.filter(item =&gt; item.id !== id)</span><br></pre></td></tr></table></figure><p>上面代码的作用是筛选除了taskList集合中元素 “item”的id 不为 “id”的所有元素，作用和删除指定元素效果一致</p><h3 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h3><p>用于求和的函数，用于数组和集合，会使用回调函数将一个数组或集合中的值循环取出遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let total = this.list.reduce((sum, item) =&gt; sum + item.num, 0)</span><br></pre></td></tr></table></figure><p>上面代码的作用，设置求和的初始值为0.将sum与item中的num相加，每次相加的值赋给sum，最终达到求和的效果</p><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><h3 id="computed和methods方法"><a href="#computed和methods方法" class="headerlink" title="computed和methods方法"></a>computed和methods方法</h3><p>computed侧重于数据的计算与调用，在不同的地方多次使用只会调用一次，具有缓存机制，如果使用methods方法在多个地方使用则会调用多次。</p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>v-for是vue2中的一个指令，用于遍历数组，集合或列表的，它包含有一个 :key 的属性，如果设置唯一性的key则将元素和标签进行了唯一性绑定，元素的变化会带动标签的样式变化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习7，使用ajax实现判断用户名是否存在</title>
      <link href="/2024/05/25/homeWork9/"/>
      <url>/2024/05/25/homeWork9/</url>
      
        <content type="html"><![CDATA[<head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>判断用户名</title></head><style>body {    background: url("https://img2.imgtp.com/2024/05/21/CP7YxrlN.jpg");    background-size: cover;    margin: 0;    padding: 0;}.div {background: rgb(0, 0, 0, 1) url("https://t.tutu.to/img/tYmH");width: 500px;height: 500px;border: 1px solid #333;border-radius: 5px;text-align: center;margin: 200px auto auto;}.div p {padding: 30px 0;font-size: 30px;}.ul {width: 100%;padding: 0;list-style: none;}.ul li {display: flex;justify-content: center;align-items: center;margin: 10px 0;}.ul li span {width: 80px;text-align: right;}.ul li input {width: 228px;height: 30px;border: 1px solid #333;border-radius: 3px;padding-left: 20px;outline: none;margin-left: 10px;}.ul li button {color: #ffffff;background-color: aqua;font-size: 16px;padding: 10px 60px;outline: inherit;border: none;border-radius: 3px;cursor: pointer;margin: 20px 0;}.user_hint,.password_hint,.confirm_hint,.email_hint,.mobile_hint {margin-left: 10px;font-size: 16px;}</style><body><div class="div">    <p>注册</p>    <form>        <ul class="ul">            <li>                <span>用户名：</span>                <input type="text" id="username" name="username" value="" placeholder="4-8位用户名" class="user">                <span class="user_hint"></span>            </li>            <li>                <span>密码：</span>                <input type="password" name="psd" placeholder="6-16位密码" class="password">                <span class="password_hint"></span>            </li>            <li>                <span>确认密码：</span>                <input type="password" name="" placeholder="确认密码" class="confirm">                <span class="confirm_hint"></span>            </li>            <li>                <span>邮箱：</span>                <input type="text" name="email" placeholder="邮箱" class="email">                <span class="email_hint"></span>            </li>            <li>                <span>电话：</span>                <input type="tel" name="mobile" value="" placeholder="手机号" class="mobile">                <span class="mobile_hint"></span>            </li>            <li>                <button type="reset" class="reset" onclick="reset">重置</button>&nbsp;&nbsp;                <button type="button" class="button">确认</button>            </li>        </ul>    </form></div><script src="https://www.jq22.com/jquery/jquery-1.10.2.js"></script><script src="https://s1.pstatp.com/cdn/expire-1-M/jquery/1.10.2/jquery.min.js"></script><script>    // user    // 表单信息的完整性    let user_Boolean = false;    let password_Boolean = false;    let confirm_Boolean = false;    let email_Boolean = false;    let Mobile_Boolean = false;    $('.user').blur(function () {        // 使用正则表达式判断用户名是否为数字和字符的组合且在4-8位        if ((/^[a-z0-9_-]{4,8}$/).test($(".user").val())) {            // 获取标签            let user = document.querySelector("#username")            let xhr = new XMLHttpRequest();            let url = "https://mock.apipark.cn/m1/4538608-4186405-default/users/verification";            url += "?username=" + user.value;            xhr.open("GET", url, true);            xhr.send();            // 219971147朱良桂            xhr.onreadystatechange = function () {                if (xhr.readyState === 4 && xhr.status === 200) {                    let result = xhr.responseText;                    if (result === "1") {                        $('.user_hint').html("用户名已经存在").css("color", "red");                        user_Boolean = false;                    } else {                        $('.user_hint').html("√").css("color", "green");                    }                }            }            // 修改用户名的标志            user_Boolean = true;        } else {            $('.user_hint').html("×").css("color", "red");            user_Boolean = false;        }    });    // password    $('.password').blur(function () {        // 使用正则表达式判断密码是否为数字和字符，且在6-16位        if ((/^[a-z0-9_-]{6,16}$/).test($(".password").val())) {            $('.password_hint').html("✔").css("color", "green");            password_Boolean = true;        } else {            $('.password_hint').html("×").css("color", "red");            password_Boolean = false;        }    });    // password_confirm    $('.confirm').blur(function () {        // 判断两次密码输入是否一致        if (($(".password").val()) === ($(".confirm").val())) {            $('.confirm_hint').html("✔").css("color", "green");            confirm_Boolean = true;        } else {            $('.confirm_hint').html("×").css("color", "red");            confirm_Boolean = false;        }    });    // Email    $('.email').blur(function () {        // [a-z\d]+：匹配一个或多个小写字母或数字，([\da-z](-[\da-z])?)+：匹配一个或多个字母或数字，后面可选地跟着一个连字符和一个字母或数字        // (\.{1,2}[a-z]+)+：匹配一个或两个点后面跟着一个或多个小写字母        if ((/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/).test($(".email").val())) {            $('.email_hint').html("✔").css("color", "green");            email_Boolean = true;        } else {            $('.email_hint').html("×").css("color", "red");            email_Boolean = false;        }    });    // Mobile    $('.mobile').blur(function () {        if ((/^1[345789]\d{9}$/).test($(".mobile").val())) {            $('.mobile_hint').html("✔").css("color", "green");            Mobile_Boolean = true;        } else {            $('.mobile_hint').html("×").css("color", "red");            Mobile_Boolean = false;        }    });    // click    $('.button').click(function () {        // 判断所有的输入是否满足标准        if (user_Boolean && password_Boolean && confirm_Boolean && email_Boolean && Mobile_Boolean) {            alert("注册成功");            reset();        } else {            alert("表格信息有误");        }    });    // 重置按钮点击事件    let reset = function () {        $('.reset').click(function () {            // 清空输入框的值            $('.user').val('');            $('.password').val('');            $('.confirm').val('');            $('.email').val('');            $('.mobile').val('');            // 清空提示信息            $('.user_hint').html('');            $('.password_hint').html('');            $('.confirm_hint').html('');            $('.email_hint').html('');            $('.mobile_hint').html('');            // 重置标志值            user_Boolean = false;            password_Boolean = false;            confirm_Boolean = false;            email_Boolean = false;            Mobile_Boolean = false;        });    }</script></body>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验5，自主实现注册页面</title>
      <link href="/2024/05/23/homeWork8/"/>
      <url>/2024/05/23/homeWork8/</url>
      
        <content type="html"><![CDATA[<head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>注册</title></head><style>body {    background: url("https://img2.imgtp.com/2024/05/21/CP7YxrlN.jpg");    background-size: cover;    margin: 0;    padding: 0;}.div {background: rgb(0, 0, 0, 1) url("https://t.tutu.to/img/37l5");width: 500px;height: 500px;border: 1px solid #333;border-radius: 5px;text-align: center;margin: 200px auto auto;}.div p {padding: 30px 0;font-size: 30px;}.ul {width: 100%;padding: 0;list-style: none;}.ul li {display: flex;justify-content: center;align-items: center;margin: 10px 0;}.ul li span {width: 80px;text-align: right;}.ul li input {width: 228px;height: 30px;border: 1px solid #333;border-radius: 3px;padding-left: 20px;outline: none;margin-left: 10px;}.ul li button {color: #ffffff;background-color: aqua;font-size: 16px;padding: 10px 60px;outline: inherit;border: none;border-radius: 3px;cursor: pointer;margin: 20px 0;}.user_hint,.password_hint,.confirm_hint,.email_hint,.mobile_hint {margin-left: 10px;font-size: 16px;}</style><body><div class="div">    <p>注册</p>    <form>        <ul class="ul">            <li>                <span>用户名：</span>                <input type="text" name="username" value="" placeholder="4-8位用户名，由数字或字母组成" class="user">                <span class="user_hint"></span>            </li>            <li>                <span>密码：</span>                <input type="password" name="psd" placeholder="6-16位密码,由数字或字母组成" class="password">                <span class="password_hint"></span>            </li>            <li>                <span>确认密码：</span>                <input type="password" name="" placeholder="确认密码" class="confirm">                <span class="confirm_hint"></span>            </li>            <li>                <span>邮箱：</span>                <input type="text" name="email" placeholder="邮箱" class="email">                <span class="email_hint"></span>            </li>            <li>                <span>电话：</span>                <input type="tel" name="mobile" value="" placeholder="手机号" class="mobile">                <span class="mobile_hint"></span>            </li>            <li>                <button type="reset" class="reset" onclick="reset" >重置</button>&nbsp;&nbsp;                <button type="button" class="button">确认</button>            </li>        </ul>    </form></div><script src="https://www.jq22.com/jquery/jquery-1.10.2.js"></script><script src="https://s1.pstatp.com/cdn/expire-1-M/jquery/1.10.2/jquery.min.js"></script><script>    // user    // 表单信息的完整性    let user_Boolean = false;    let password_Boolean = false;    let confirm_Boolean = false;    let email_Boolean = false;    let Mobile_Boolean = false;    $('.user').blur(function () {        // 使用正则表达式判断用户名是否为数字和字符的组合且在4-8位        if ((/^[a-z0-9_-]{4,8}$/).test($(".user").val())) {            // 满足条件就显示正确的图案，✔            $('.user_hint').html("✔").css("color", "green");            // 修改用户名的标志            user_Boolean = true;        } else {            $('.user_hint').html("×").css("color", "red");            user_Boolean = false;        }    });    // password    $('.password').blur(function () {        // 使用正则表达式判断密码是否为数字和字符，且在6-16位        if ((/^[a-z0-9_-]{6,16}$/).test($(".password").val())) {            $('.password_hint').html("✔").css("color", "green");            password_Boolean = true;        } else {            $('.password_hint').html("×").css("color", "red");            password_Boolean = false;        }    });    // password_confirm    $('.confirm').blur(function () {        // 判断两次密码输入是否一致        if (($(".password").val()) === ($(".confirm").val())) {            $('.confirm_hint').html("✔").css("color", "green");            confirm_Boolean = true;        } else {            $('.confirm_hint').html("×").css("color", "red");            confirm_Boolean = false;        }    });    // Email    $('.email').blur(function () {        if ((/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/).test($(".email").val())) {            $('.email_hint').html("✔").css("color", "green");            email_Boolean = true;        } else {            $('.email_hint').html("×").css("color", "red");            email_Boolean = false;        }    });    // Mobile    $('.mobile').blur(function () {        if ((/^1[345789]\d{9}$/).test($(".mobile").val())) {            $('.mobile_hint').html("✔").css("color", "green");            Mobile_Boolean = true;        } else {            $('.mobile_hint').html("×").css("color", "red");            Mobile_Boolean = false;        }    });    // click    $('.button').click(function () {        // 判断所有的输入是否满足标准        if (user_Boolean && password_Boolean && confirm_Boolean && email_Boolean && Mobile_Boolean) {            alert("注册成功");            reset();        } else {            alert("表格信息有误");        }    });    // 重置按钮点击事件    let reset  = function (){        $('.reset').click(function () {            // 清空输入框的值            $('.user').val('');            $('.password').val('');            $('.confirm').val('');            $('.email').val('');            $('.mobile').val('');            // 清空提示信息            $('.user_hint').html('');            $('.password_hint').html('');            $('.confirm_hint').html('');            $('.email_hint').html('');            $('.mobile_hint').html('');            // 重置标志值            user_Boolean = false;            password_Boolean = false;            confirm_Boolean = false;            email_Boolean = false;            Mobile_Boolean = false;        });    }</script></body>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业6,选择一个jquery插件制作demo</title>
      <link href="/2024/05/14/homeWork7/"/>
      <url>/2024/05/14/homeWork7/</url>
      
        <content type="html"><![CDATA[<meta charset="UTF-8"><style type="text/css">        .front {            width: 300px;            margin: 5px 32px 45px 32px;            background-color: #f0f0f0;            color: #666;            text-align: center;            padding: 3px;            border-radius: 5px;        }        .booking_area {            float: right;            position: relative;            width: 200px;            height: 450px;        }        .booking_area h3 {            margin: 5px 5px 0 0;            font-size: 16px;        }        .booking_area p {            line-height: 26px;            font-size: 16px;            color: #999        }        .booking_area p span {            color: #666        }        div.seatCharts-cell {            color: #182C4E;            height: 25px;            width: 25px;            line-height: 25px;            margin: 3px;            float: left;            text-align: center;            outline: none;            font-size: 13px;        }        div.seatCharts-seat {            color: #fff;            cursor: pointer;            -webkit-border-radius: 5px;            -moz-border-radius: 5px;            border-radius: 5px;        }        div.seatCharts-row {            height: 35px;        }        div.seatCharts-seat.available {            background-color: #B9DEA0;        }        div.seatCharts-seat.focused {            background-color: #76B474;            border: none;        }        div.seatCharts-seat.selected {            background-color: #E6CAC4;        }        div.seatCharts-seat.unavailable {            background-color: #472B34;            cursor: not-allowed;        }        div.seatCharts-container {            border-right: 1px dotted #adadad;            width: 400px;            padding: 20px;            float: left;        }        div.seatCharts-legend {            padding-left: 0px;            position: absolute;            bottom: 16px;        }        ul.seatCharts-legendList {            padding-left: 0px;        }        .seatCharts-legendItem {            float: left;            width: 90px;            margin-top: 10px;            line-height: 2;        }        span.seatCharts-legendDescription {            margin-left: 5px;            line-height: 30px;        }        .checkout-button {            display: block;            width: 80px;            height: 24px;            line-height: 20px;            margin: 10px auto;            border: 1px solid #999;            font-size: 14px;            cursor: pointer        }        #seats_chose {            max-height: 150px;            overflow-y: auto;            width: 200px;        }        #seats_chose li {            float: left;            width: 72px;            height: 26px;            line-height: 26px;            border: 1px solid #d3d3d3;            background: #f7f7f7;            margin: 6px;            font-size: 14px;            font-weight: bold;            text-align: center        }    </style><div class="container">    <div class="demo clearfix">        <!---左边座位列表----->        <div id="seat_area" class="seatCharts-container" tabindex="0">            <div class="front">屏幕</div>        </div>        <!---右边选座信息----->        <div class="booking_area">            <p>电影：<span>天将雄师</span></p>            <p>时间：<span>03月20日 22:15</span></p>            <p>座位：</p>            <ul id="seats_chose"></ul>            <p>票数：<span id="tickects_num">0</span></p>            <p>总价：<b>￥<span id="total_price">0</span></b></p>            <input type="button" class="btn" value="确定购买">        </div>    </div></div><script src="https://www.jq22.com/jquery/1.9.1/jquery.min.js"></script><script src="https://s1.pstatp.com/cdn/expire-1-M/jquery/1.9.1/jquery.min.js"></script><script type="text/javascript">    let price = 100; //电影票价    $(document).ready(function () {        var $cart = $('#seats_chose'), //座位区            $tickects_num = $('#tickects_num'), //票数            $total_price = $('#total_price'); //票价总额        var sc = $('#seat_area').seatCharts({            map: [//座位结构图 a 代表座位; 下划线 "_" 代表过道                'cccccccccc',                'cccccccccc',                '__________',                'cccccccc__',                'cccccccccc',                'cccccccccc',                'cccccccccc',                'cccccccccc',                'cccccccccc',                'cc__cc__cc'            ],            naming: {//设置行列等信息                top: false            },            legend: {//定义图例                node: $('#legend'),                items: [                    ['c', 'available', '可选座'],                    ['c', 'unavailable', '已售出']                ]            },            click: function () {                if (this.status() === 'available') { //若为可选座状态，添加座位                    $('<li>' + (this.settings.row + 1) + '排' + this.settings.label + '座</li>')                        .attr('id', 'cart-item-' + this.settings.id)                        .data('seatId', this.settings.id)                        .appendTo($cart);                    $tickects_num.text(sc.find('selected').length + 1); //统计选票数量                    $total_price.text(getTotalPrice(sc) + price);//计算票价总金额                    return 'selected';                } else if (this.status() === 'selected') { //若为选中状态                    $tickects_num.text(sc.find('selected').length - 1);//更新票数量                    $total_price.text(getTotalPrice(sc) - price);//更新票价总金额                    $('#cart-item-' + this.settings.id).remove();//删除已预订座位                    return 'available';                } else if (this.status() === 'unavailable') { //若为已售出状态                    return 'unavailable';                } else {                    return this.style();                }            }        });        //设置已售出的座位        sc.get(['1_3', '1_4', '4_4', '4_5', '4_6', '4_7', '4_8']).status('unavailable');    });    function getTotalPrice(sc) { //计算票价总额        let total = 0;        sc.find('selected').each(function () {            total += price;        });        return total;    }!function(t){t.fn.seatCharts=function(s){if(this.data("seatCharts"))return this.data("seatCharts");var e=this,a={},n=[],i={animate:!1,naming:{top:!0,left:!0,getId:function(t,s,e){return s+"_"+e},getLabel:function(t,s,e){return e}},legend:{node:null,items:[]},click:function(){return"available"==this.status()?"selected":"selected"==this.status()?"available":this.style()},focus:function(){return"available"==this.status()?"focused":this.style()},blur:function(){return this.status()},seats:{}},r=function(s,e){return function(n){var i=this;i.settings=t.extend({status:"available",style:"available",data:e.seats[n.character]||{}},n),i.settings.$node=t("<div></div>"),i.settings.$node.attr({id:i.settings.id,role:"checkbox","aria-checked":!1,focusable:!0,tabIndex:-1}).text(i.settings.label).addClass(["seatCharts-seat","seatCharts-cell","available"].concat(i.settings.classes,"undefined"==typeof e.seats[i.settings.character]?[]:e.seats[i.settings.character].classes).join(" ")),i.data=function(){return i.settings.data},i["char"]=function(){return i.settings.character},i.node=function(){return i.settings.$node},i.style=function(){return 1==arguments.length?function(t){var s=i.settings.style;return t==s?s:(i.settings.status="focused"!=t?t:i.settings.status,i.settings.$node.attr("aria-checked","selected"==t),e.animate?i.settings.$node.switchClass(s,t,200):i.settings.$node.removeClass(s).addClass(t),i.settings.style=t)}(arguments[0]):i.settings.style},i.status=function(){return i.settings.status=1==arguments.length?i.style(arguments[0]):i.settings.status},function(n,r,c){t.each(["click","focus","blur"],function(t,u){i[u]=function(){return"focus"==u&&(void 0!==s.attr("aria-activedescendant")&&a[s.attr("aria-activedescendant")].blur(),s.attr("aria-activedescendant",c.settings.id),c.node().focus()),i.style("function"==typeof n[r][u]?n[r][u].apply(c):e[u].apply(c))}})}(e.seats,i.settings.character,i),i.node().on("click",i.click).on("mouseenter",i.focus).on("mouseleave",i.blur).on("keydown",function(t,e){return function(n){var i;switch(n.which){case 32:n.preventDefault(),t.click();break;case 40:case 38:if(n.preventDefault(),i=function r(t,s,a){var c;return c=t.index(a)||38!=n.which?t.index(a)==t.length-1&&40==n.which?t.first():t.eq(t.index(a)+(38==n.which?-1:1)):t.last(),i=c.find(".seatCharts-seat,.seatCharts-space").eq(s.index(e)),i.hasClass("seatCharts-space")?r(t,s,c):i}(e.parents(".seatCharts-container").find(".seatCharts-row:not(.seatCharts-header)"),e.parents(".seatCharts-row:first").find(".seatCharts-seat,.seatCharts-space"),e.parents(".seatCharts-row:not(.seatCharts-header)")),!i.length)return;t.blur(),a[i.attr("id")].focus(),i.focus(),s.attr("aria-activedescendant",i.attr("id"));break;case 37:case 39:if(n.preventDefault(),i=function(t){return t.index(e)||37!=n.which?t.index(e)==t.length-1&&39==n.which?t.first():t.eq(t.index(e)+(37==n.which?-1:1)):t.last()}(e.parents(".seatCharts-container:first").find(".seatCharts-seat:not(.seatCharts-space)")),!i.length)return;t.blur(),a[i.attr("id")].focus(),i.focus(),s.attr("aria-activedescendant",i.attr("id"))}}}(i,i.node()))}}(e,i);if(e.addClass("seatCharts-container"),t.extend(!0,i,s),i.naming.rows=i.naming.rows||function(t){for(var s=[],e=1;t>=e;e++)s.push(e);return s}(i.map.length),i.naming.columns=i.naming.columns||function(t){for(var s=[],e=1;t>=e;e++)s.push(e);return s}(i.map[0].split("").length),i.naming.top){var c=t("<div></div>").addClass("seatCharts-row seatCharts-header");i.naming.left&&c.append(t("<div></div>").addClass("seatCharts-cell")),t.each(i.naming.columns,function(s,e){c.append(t("<div></div>").addClass("seatCharts-cell").text(e))})}return e.append(c),t.each(i.map,function(s,c){var u=t("<div></div>").addClass("seatCharts-row");i.naming.left&&u.append(t("<div></div>").addClass("seatCharts-cell seatCharts-space").text(i.naming.rows[s])),t.each(c.match(/[a-z_]{1}(\[[0-9a-z_]{0,}(,[0-9a-z_ ]+)?\])?/gi),function(e,c){var h=c.match(/([a-z_]{1})(\[([0-9a-z_ ,]+)\])?/i),d=h[1],o="undefined"!=typeof h[3]?h[3].split(","):[],l=o.length?o[0]:null,f=2===o.length?o[1]:null;u.append("_"!=d?function(t){i.seats[d]=d in i.seats?i.seats[d]:{};var c=l?l:t.getId(d,t.rows[s],t.columns[e]);return a[c]=new r({id:c,label:f?f:t.getLabel(d,t.rows[s],t.columns[e]),row:s,column:e,character:d}),n.push(c),a[c].node()}(i.naming):t("<div></div>").addClass("seatCharts-cell seatCharts-space"))}),e.append(u)}),i.legend.items.length?function(s){var a=(s.node||t("<div></div>").insertAfter(e)).addClass("seatCharts-legend"),n=t("<ul></ul>").addClass("seatCharts-legendList").appendTo(a);return t.each(s.items,function(s,e){n.append(t("<li></li>").addClass("seatCharts-legendItem").append(t("<div></div>").addClass(["seatCharts-seat","seatCharts-cell",e[1]].concat(i.classes,"undefined"==typeof i.seats[e[0]]?[]:i.seats[e[0]].classes).join(" "))).append(t("<span></span>").addClass("seatCharts-legendDescription").text(e[2])))}),a}(i.legend):null,e.attr({tabIndex:0}),e.focus(function(){e.attr("aria-activedescendant")&&a[e.attr("aria-activedescendant")].blur(),e.find(".seatCharts-seat:not(.seatCharts-space):first").focus(),a[n[0]].focus()}),e.data("seatCharts",{seats:a,seatIds:n,status:function(){var s=this;return 1==arguments.length?s.seats[arguments[0]].status():function(e,a){return"string"==typeof e?s.seats[e].status(a):function(){t.each(e,function(t,e){s.seats[e].status(a)})}()}(arguments[0],arguments[1])},each:function(t){var s=this;for(var e in s.seats)if(!1===t.call(s.seats[e],e))return e;return!0},node:function(){var s=this;return t("#"+s.seatIds.join(",#"))},find:function(t){var s=this,e=s.set();return t instanceof RegExp?function(){return s.each(function(s){s.match(t)&&e.push(s,this)}),e}():1==t.length?function(t){return s.each(function(){this["char"]()==t&&e.push(this.settings.id,this)}),e}(t):function(){return t.indexOf(".")>-1?function(){var a=t.split(".");return s.each(function(t){this["char"]()==a[0]&&this.status()==a[1]&&e.push(this.settings.id,this)}),e}():function(){return s.each(function(){this.status()==t&&e.push(this.settings.id,this)}),e}()}()},set:function u(){var s=this;return{seats:[],seatIds:[],length:0,status:function(){var s=arguments,e=this;return 1==this.length&&0==s.length?this.seats[0].status():function(){t.each(e.seats,function(){this.status.apply(this,s)})}()},node:function(){return s.node.call(this)},each:function(){return s.each.call(this,arguments[0])},get:function(){return s.get.call(this,arguments[0])},find:function(){return s.find.call(this,arguments[0])},set:function(){return u.call(s)},push:function(t,s){this.seats.push(s),this.seatIds.push(t),++this.length}}},get:function(s){var e=this;return"string"==typeof s?e.seats[s]:function(){var a=e.set();return t.each(s,function(t,s){"object"==typeof e.seats[s]&&a.push(s,e.seats[s])}),a}()}}),e.data("seatCharts")}}(jQuery);</script>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习5,使用jQuery制作游戏角色</title>
      <link href="/2024/05/12/homeWork6/"/>
      <url>/2024/05/12/homeWork6/</url>
      
        <content type="html"><![CDATA[<style>        .map {            background-color: black;            height: 80em;            width: 50em;        }        #role {            height: 10em;            width: 10em;            position: relative; /* 将图片设置为相对定位 */            z-index: 1; /* 将角色置于最上层 */        }</style><meta charset="UTF-8"><div><span>操作手册：左键双击变身，右键移动</span><span>图片加载缓慢，效果展示第一次有延迟</span><div class="map">    <img id="role" src="https://t.tutu.to/img/tEJj" alt=""></div></div><script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.min.js"></script><script>$(document).ready(function () {        let map = $(".map");        let role = $("#role");        // 禁用游戏区域中的右键开启菜单        $(document).contextmenu(function (e) {            // 如果右键点击的区域为游戏区域则禁用右键菜单            return !$(e.target).hasClass("map");        });        // 标记双击事件是否已触发        let doubleClickTriggered = false;        // 设置鼠标点击事件        map.mousedown(function (e) {            // 当鼠标右键点击时            if (3 === e.which) {                // 获取鼠标此时坐标                let x = e.pageX;                let y = e.pageY;                let roleX = role.offset().left + 80;                if (x <= roleX) {                    // 修改人物动画                    role.attr("src", "https://t.tutu.to/img/tEJj");                } else {                    role.attr("src", "https://t.tutu.to/img/tXqP");                }                // 如果双击事件已触发，则统一使用双击事件的图片                if (doubleClickTriggered) {                    if (x <= roleX) {                        role.attr("src", "https://t.tutu.to/img/tZ54");                    } else {                        role.attr("src", "https://t.tutu.to/img/tGTS");                    }                }                role.stop().animate({                    marginLeft: x,                    marginTop: y                }, 3000);            }        });        // 设置鼠标双击事件        map.on("dblclick", function (e) {            // 当鼠标左键双击时            if (1 === e.which) {                // 修改角色图片                if (doubleClickTriggered) {                    role.attr("src", "https://t.tutu.to/img/tGTS");                } else {                    role.attr("src", "https://t.tutu.to/img/tZ54");                }// 标记双击事件已触发doubleClickTriggered = true;}});});</script>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业5，使用jQuery修改表格</title>
      <link href="/2024/05/08/homeWork5/"/>
      <url>/2024/05/08/homeWork5/</url>
      
        <content type="html"><![CDATA[<table border="0" cellspacing="0" cellpadding="0" id="myTable">    <tr id="row1">        <td>书名</td>        <td>价格</td>    </tr>    <tr id="row2">        <td>看得见风景的房间</td>        <td class="center">&yen;30.00</td>    </tr>    <tr id="row3">        <td>60个瞬间</td>        <td class="center">&yen;32.00</td>    </tr></table><input name="b1" type="button" value="增加一行" onclick="addRow()" /><input name="b2" type="button" value="删除第2行" onclick="delRow()" /><input name="b3" type="button" value="修改标题样式" onclick="updateRow()" /><input name="b4" type="button" value="复制最后一行" onclick="copyRow()" /><style type="text/css">        body {            font-size: 13px;            line-height: 25px;        }        table {            border-top: 1px solid #333;            border-left: 1px solid #333;            width: 300px;        }        td {            border-right: 1px solid #333;            border-bottom: 1px solid #333;        }        .center {            text-align: center;        }</style><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addRow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建新节点</span></span><br><span class="line">    <span class="keyword">let</span> newRow = $(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;幸福从天而降&lt;/td&gt;&lt;td align=&#x27;center&#x27;&gt;&amp;yen;18.50&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 将节点添加到指定标签后</span></span><br><span class="line">    $(<span class="string">&quot;#row1&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">append</span>(newRow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 219971147朱良桂</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateRow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取标签后，设置css</span></span><br><span class="line">    $(<span class="string">&quot;#row1&quot;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;font-weight&quot;</span>: <span class="string">&quot;bold&quot;</span>, <span class="string">&quot;text-align&quot;</span>: <span class="string">&quot;center&quot;</span>, <span class="string">&quot;background-color&quot;</span>: <span class="string">&quot;#cccccc&quot;</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delRow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dRow = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;tr&quot;</span>); <span class="comment">//访问被删除的行</span></span><br><span class="line">    <span class="keyword">if</span> (dRow[<span class="number">2</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除指定节点</span></span><br><span class="line">        dRow[<span class="number">2</span>].<span class="title function_">remove</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyRow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取table标签的所有子节点</span></span><br><span class="line">    <span class="keyword">let</span> lastRow = $(<span class="string">&quot;#myTable tr:last-child&quot;</span>);</span><br><span class="line">    <span class="comment">// 克隆节点</span></span><br><span class="line">    <span class="keyword">let</span> newRow = lastRow.<span class="title function_">clone</span>();</span><br><span class="line">    <span class="comment">// 将节点添加到指定标签之后</span></span><br><span class="line">    $(<span class="string">&quot;#myTable&quot;</span>).<span class="title function_">append</span>(newRow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.slim.min.js"></script><script>        function addRow() {            // 创建新节点            let newRow = $("<tr><td>幸福从天而降</td><td align='center'>&yen;18.50</td></tr>");            // 将节点添加到指定标签后            $("#row1").parent().append(newRow);        }        // 219971147朱良桂        function updateRow() {            // 获取标签后，设置css            $("#row1").css({"font-weight": "bold", "text-align": "center", "background-color": "#cccccc"});        }        function delRow() {            let dRow = document.getElementsByTagName("tr"); //访问被删除的行            if(dRow[2]!=null){                // 删除指定节点                dRow[2].remove();            }        }        function copyRow() {            // 获取table标签的所有子节点            let lastRow = $("#myTable tr:last-child");            // 克隆节点            let newRow = lastRow.clone();            // 将节点添加到指定标签之后            $("#myTable").append(newRow);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式</title>
      <link href="/2024/04/29/java-DeviseModel/"/>
      <url>/2024/04/29/java-DeviseModel/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><p>分析：</p><p>定义： 将继承关系变为动态的关系</p><p>角色：</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security学习笔记</title>
      <link href="/2024/04/28/java-Security/"/>
      <url>/2024/04/28/java-Security/</url>
      
        <content type="html"><![CDATA[<h2 id="通过-security-实现自定义用户认证"><a href="#通过-security-实现自定义用户认证" class="headerlink" title="通过 security 实现自定义用户认证"></a>通过 security 实现自定义用户认证</h2><ol><li>密码加密器（PasswordEncoder） 作用：对用户输入的密码进行加密和校验</li><li>用户登录服务组件 （UserDetailsService） 作用：根据用户名，获取用户的主题</li><li>自定义认证和授权的配置 （SecurityFilterChain） 作用：自定义过滤器链，通过提供的方法来进行过滤器的配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户认证</span></span><br><span class="line">    security.formLogin(configurer -&gt;</span><br><span class="line">        configurer.loginPage() <span class="comment">//默认登录页面</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户退出</span></span><br><span class="line">    security.logout(configurer -&gt; configurer.logoutUrl());</span><br></pre></td></tr></table></figure><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><p>Spring Security 出现 ‘login.html?error’ is not a valid redirect URL 异常</p><h4 id="报错代码"><a href="#报错代码" class="headerlink" title="报错代码"></a>报错代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户认证</span></span><br><span class="line">security.formLogin(configurer -&gt;</span><br><span class="line">    configurer.loginPage(<span class="string">&quot;users/login&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/users/login&quot;</span>)</span><br><span class="line">            .failureUrl(<span class="string">&quot;/users/error&quot;</span>) <span class="comment">// 重定向到失败页面</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><p>在security的路径配置中，必须在代码前缀加上 “&#x2F;“</p><h4 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户认证</span></span><br><span class="line">security.formLogin(configurer -&gt;</span><br><span class="line">    configurer.loginPage(<span class="string">&quot;/users/login&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/users/login&quot;</span>)</span><br><span class="line">            .failureUrl(<span class="string">&quot;/users/error&quot;</span>) <span class="comment">// 重定向到失败页面</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h3><p>security 的登录失败页面是在原重定向的页面拼接上 “?error” 然后对拼写的页面进行检查然后在类<br>org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler#setDefaultFailureUrl 中进行检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefaultFailureUrl</span><span class="params">(String defaultFailureUrl)</span> &#123;</span><br><span class="line">Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl),</span><br><span class="line">() -&gt; <span class="string">&quot;&#x27;&quot;</span> + defaultFailureUrl + <span class="string">&quot;&#x27; is not a valid redirect URL&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.defaultFailureUrl = defaultFailureUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 UrlUtils.isValidRedirectUrl(defaultFailureUrl) 进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValidRedirectUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> url != <span class="literal">null</span> &amp;&amp; (url.startsWith(<span class="string">&quot;/&quot;</span>) || isAbsoluteUrl(url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回 true 就加入后缀 如果返回 false 就抛出异常</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务的相关学习笔记</title>
      <link href="/2024/04/27/java-StudyNotes/"/>
      <url>/2024/04/27/java-StudyNotes/</url>
      
        <content type="html"><![CDATA[<h2 id="工具类包-StrUtil"><a href="#工具类包-StrUtil" class="headerlink" title="工具类包-StrUtil"></a>工具类包-StrUtil</h2><p>String字符串工具包 提供了大量的字符串相关方法</p><h3 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--StringUtils工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StrUtil.方法名()</span><br></pre></td></tr></table></figure><p>isNotBlank</p><p>用于判断字符串是否为空，null，””，等等</p><h2 id="对于不同的包的配置类如何生效"><a href="#对于不同的包的配置类如何生效" class="headerlink" title="对于不同的包的配置类如何生效"></a>对于不同的包的配置类如何生效</h2><p>在resource目录下的 META-INF 创建spring.factories文件<br>早期是使用spring.factories<br>现在改为EnableAutoConfiguration<br>配置类中写对应的类路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">对应类路径</span></span><br></pre></td></tr></table></figure><h3 id="多个路径使用-隔开"><a href="#多个路径使用-隔开" class="headerlink" title="多个路径使用,\隔开"></a>多个路径使用,\隔开</h3><h3 id="对于不想要生效的配置类"><a href="#对于不想要生效的配置类" class="headerlink" title="对于不想要生效的配置类"></a>对于不想要生效的配置类</h3><h4 id="使用-Conditional"><a href="#使用-Conditional" class="headerlink" title="使用 @Conditional"></a>使用 @Conditional</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnClass()</span><br></pre></td></tr></table></figure><p>对于注解@ConditionalOnClass() 参数为 类.class 没有对应类将不进行注入</p><h2 id="微服务与微服务之间的数据传输"><a href="#微服务与微服务之间的数据传输" class="headerlink" title="微服务与微服务之间的数据传输"></a>微服务与微服务之间的数据传输</h2><p>一个微服务在与另一个微服务进行数据交互时用 OpenFeign 发起的远程调用不会自动传递信息</p><p>需要自己定义拦截器，添加请求头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RequestInterceptor <span class="title function_">userInfoRequestInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestInterceptor</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate template)</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserContext.getUser();</span><br><span class="line">            <span class="keyword">if</span> (userId != <span class="literal">null</span>)&#123;</span><br><span class="line">                template.header(<span class="string">&quot;user-info&quot;</span>, userId.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OpenFeign的使用需要开启注解"><a href="#OpenFeign的使用需要开启注解" class="headerlink" title="OpenFeign的使用需要开启注解"></a>OpenFeign的使用需要开启注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.zlg.api.client&quot;,defaultConfiguration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure><h2 id="微服务配置管理"><a href="#微服务配置管理" class="headerlink" title="微服务配置管理"></a>微服务配置管理</h2><img src="https://img2.imgtp.com/2024/04/27/pERzUWKl.png" alt=""><h3 id="1-添加配置到-Nacos-配置中心"><a href="#1-添加配置到-Nacos-配置中心" class="headerlink" title="1.添加配置到 Nacos 配置中心"></a>1.添加配置到 Nacos 配置中心</h3><img src="https://img2.imgtp.com/2024/04/29/9VPoAAUN.png" alt="" /><p>对于需要动态修改的配置内容使用 “${}” 变量 的方式作为占位符,然后在需要改动的配置中进行变量的赋值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">pw:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>其中 ${ :} 表示如果没有进行变量赋值时的默认值</p><h3 id="2-拉取共享配置"><a href="#2-拉取共享配置" class="headerlink" title="2.拉取共享配置"></a>2.拉取共享配置</h3><p>springCloud 启动的流程</p><img src="https://img2.imgtp.com/2024/04/29/uCqc3iPK.png" alt=""><ol><li>通过xml依赖引入，拉取配置文件和读取 bootstrap 文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencys</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos配置管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--读取bootstrap文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencys</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>新建 bootstrap.yaml 配置文件 配置nacos和共享配置文件的配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cart-service</span> <span class="comment"># 微服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment"># 共享配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-jdbc.yaml</span> <span class="comment"># 共享配置文件id</span></span><br></pre></td></tr></table></figure><h2 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h2><p>通过修改nacos中的配置可以实现不重启项目实现更新项目<br>这边通过配置一个变量来演示</p><p>自定义的配置类和参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hm.cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  Integer maxItems;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际的使用场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkCartsFull</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> lambdaQuery().eq(Cart::getUserId, userId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= cartProperties.getMaxItems()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(StrUtil.format(<span class="string">&quot;用户购物车数量不能超过&#123;&#125;&quot;</span>, cartProperties.getMaxItems()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nacos 中的配置<br><img src="https://img2.imgtp.com/2024/05/19/tw8pOfrW.png"><br>在nacos中写没有提示，建议现在idea中编写好后再进行复制<br>nacos 配置的命名规范<br><img src="https://img2.imgtp.com/2024/05/05/vatViBTq.png" ></p><p>然后就可以实现修改nacos中的配置文件达到项目的修改-简称”热更新”</p><h2 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h2><p>什么是雪崩问题：见名知义，就是在为服务中由于一个微服务模块的故障导致链路中的所有服务都无法使用</p><h3 id="保护方案"><a href="#保护方案" class="headerlink" title="保护方案"></a>保护方案</h3><ol><li>请求限流-流量整形<br>限制接口的请求并发数量，避免服务因流量激增出现故障 将原本忽高忽低的请求量限制在一定的范围上</li><li>线程隔离-舱壁模式<br>模拟船舱隔板的防水原理。通过限定每个业务能够使用的线程数量而将故障隔离，避免故障扩散。</li><li>服务熔断<br>由断路器统计请求的异常比例或调慢比例，如果超出阈值则熔断该业务，则拦截该接口的请求。 熔断期间，所有请求快速失败，全部走fallback逻辑</li></ol><h3 id="保护技术"><a href="#保护技术" class="headerlink" title="保护技术"></a>保护技术</h3><img src="https://img2.imgtp.com/2024/05/05/cYQ1lGBz.png" alt=""><h3 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h3><h4 id="1-启动-sentinel"><a href="#1-启动-sentinel" class="headerlink" title="1.启动 sentinel"></a>1.启动 sentinel</h4><p>通过阿里巴巴的 sentinel-dashboard 实现<br>下载相关的jar包，使用java虚拟机运行后访问<br>相关启动命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8090 -Dcsp.sentinel.dashboard.server=localhost:8090 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p>注意: jar包的位置不能存在中文字符</p><p>启动成功后在浏览器输入对应的端口号就能进入登录页面</p><img src="https://img2.imgtp.com/2024/05/06/z6yUPpwP.png" alt=""><p>用户名和密码都是 sentinel<br>进入控制台后就可以通过控制台实现对项目相关的各种控制了</p><h4 id="2-联系项目"><a href="#2-联系项目" class="headerlink" title="2. 联系项目"></a>2. 联系项目</h4><p>导入sentinel依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置控制台</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8090</span></span><br></pre></td></tr></table></figure><p>然后访问项目接口就可以实现监控了<br>簇点链路是单机调用链路，默认情况会监控springmvc每一个Endpoint(接口) 也就是controller层的请求<br>但是默认情况下簇点展示的是接口的路径，通过restful风格编设计的接口，有些路径会产生相同路径，需要开启Sentinel的请求方式前缀进行区分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8090</span></span><br><span class="line">      <span class="attr">http-method-specify:</span> <span class="literal">true</span> <span class="comment"># 开启请求方式前缀</span></span><br></pre></td></tr></table></figure><h4 id="3-请求限流"><a href="#3-请求限流" class="headerlink" title="3. 请求限流"></a>3. 请求限流</h4><p>直接点击相关路径的流控按钮就可以进行限流的的控制</p><img src="https://img2.imgtp.com/2024/05/06/kN2Bp9fa.png" alt=""><h4 id="4-线程隔离"><a href="#4-线程隔离" class="headerlink" title="4. 线程隔离"></a>4. 线程隔离</h4><p>线程需要隔离是因为微服务相互调用导致线程资源的占用<br>涉及到微服务就需要开启Feign的Sentinel功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对sentinel的支持</span></span><br></pre></td></tr></table></figure><p>小提示： 默认情况下tomcat最大线程数是200,允许的最大连接是8192<br>开启之后，远程调用微服务的请求就会被识别为一个簇点资源<br>然后对相关簇点进行限流就可以了</p><h4 id="5-fallback"><a href="#5-fallback" class="headerlink" title="5. fallback"></a>5. fallback</h4><p>对于触发了限流或者熔断的操作并非需要抛出异常，这是就可以使用fallback的方式，使用日志的形式来处理此类情况<br>给FeignClient编写失败后的降级逻辑有两种方式</p><ol><li>FallbackClass 缺点：无法对远程调用的异常做出处理（偏向于快速启用的偷懒方式）</li><li>FallbackFactory 可以对远程调用的异常做出处理，一般采取这种方式</li></ol><p>使用FallbackFactory的方式</p><ol><li>在公共的微服务请求转发模块建立工厂</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemClientFallback</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;ItemClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ItemClient <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> List&lt;ItemDTO&gt; <span class="title function_">queryItemByIds</span><span class="params">(Collection&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;远程调用ItemClient#queryItemByIds方法出现异常，参数：&#123;&#125;&quot;</span>, ids, cause);</span><br><span class="line">                <span class="comment">// 查询购物车允许失败，查询失败，返回空集合</span></span><br><span class="line">                <span class="keyword">return</span> CollUtils.emptyList();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductStock</span><span class="params">(List&lt;OrderDetailDTO&gt; items)</span> &#123;</span><br><span class="line">                <span class="comment">// 库存扣减业务需要触发事务回滚，查询失败，抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心部分在于继承 FallbackFactory 接口 和请求失败后的业务逻辑处理</p><ol start="2"><li>然后将工厂注册为bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ItemClientFallback <span class="title function_">itemClientFallback</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemClientFallback</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后在定义的转发接口中使用工厂</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;,</span></span><br><span class="line"><span class="meta">        configuration = DefaultFeignConfig.class,</span></span><br><span class="line"><span class="meta">        fallback = ItemClientFallback.class)</span></span><br></pre></td></tr></table></figure><h4 id="6-服务熔断"><a href="#6-服务熔断" class="headerlink" title="6. 服务熔断"></a>6. 服务熔断</h4><p>熔断的过程<br><img src="https://img2.imgtp.com/2024/05/07/dfekcDUQ.png"></p><p>熔断配置<br><img src="https://img2.imgtp.com/2024/05/07/N76s3wgw.png"></p><h4 id="7-持久化保存配置"><a href="#7-持久化保存配置" class="headerlink" title="7. 持久化保存配置"></a>7. 持久化保存配置</h4><p>使用jar包启动的控制台配置，在刷新页面就会丢失相应的配置<br>所有需要持久化的保存的话需要新的方法<br>这里使用的是nacos的方式进行配置的持久化保存</p><ol><li>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体的版本号要和sentinel的版本号对应</p><ol start="2"><li>nacos配置文件<br>在对应的nacos中配置文件，配置相应的服务熔断，请求限流和隔离的相关配置</li></ol><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>为什么需要分布式事务：<br><img src="https://img2.imgtp.com/2024/05/12/7vB1CsnP.png"></p><h3 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h3><p>seata角色：<br><img src="https://img2.imgtp.com/2024/05/12/GWiC68Gx.png"><br>seara结构：<br><img src="https://img2.imgtp.com/2024/05/12/yBJOBojf.png"></p><h3 id="TC事务管理"><a href="#TC事务管理" class="headerlink" title="TC事务管理"></a>TC事务管理</h3><p>1.准备数据库表<br>TC需要对全局的事务进行管理，所以需要保存事务的状态等，就采用了持久化的保存方法</p><h4 id="微服务集成seata"><a href="#微服务集成seata" class="headerlink" title="微服务集成seata"></a>微服务集成seata</h4><p>seata的安装自行参考网上步骤，建议安装到虚拟机中</p><ol><li>依赖导入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置，微服务找到TC</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 注册中心类型 nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.16865</span><span class="number">.128</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span> <span class="comment"># seata服务名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">hmall</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与tc集群的映射关系</span></span><br><span class="line">      <span class="attr">hmall:</span> <span class="string">&quot;default&quot;</span></span><br></pre></td></tr></table></figure><p>配置在项目中可变性太小了，现在seata已经部署为了微服务，就可以通过nacos动态地配置<br>将上面的配置写入nacos的配置中<br><img src="https://img2.imgtp.com/2024/05/19/OuUG8hiw.png" /><br>然后在微服务中创建压yaml文件 bootstrap 通过yaml配置文件读取nacos的各个配置<br>示例代码如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cart-service</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.65</span><span class="number">.128</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment"># 共享配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-jdbc.yaml</span> <span class="comment"># 共享mybatis配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-log.yaml</span> <span class="comment"># 共享日志配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-swagger.yaml</span> <span class="comment"># 共享日志配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-seata.yaml</span> <span class="comment"># 共享日志配置</span></span><br></pre></td></tr></table></figure><p>再导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--统一配置管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后重启项目就ok了</p><h4 id="XA模式"><a href="#XA模式" class="headerlink" title="XA模式"></a>XA模式</h4><p>XA规范：X&#x2F;Open 组织定义的分布式事务处理的标准，它描述了全局的TM与局部的RM之间的接口，多数主流关系型数据库都支持XA规范<br>XA模式结构图：<br><img src="https://img2.imgtp.com/2024/05/19/eM1BCEvj.png"/><br>XA模式是两阶段的事务模式，先执行然后等待最后一起提交</p><ol><li>开启XA模式</li></ol><p>在nacos配置文件中统一修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置事务入口</li></ol><p>在需要开启事务的方法上加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlobalTransactional</span></span><br></pre></td></tr></table></figure><ol start="3"><li>重启项目</li></ol><h4 id="AT模式"><a href="#AT模式" class="headerlink" title="AT模式"></a>AT模式</h4><p>XA模式的改进版，加入了快照，执行完后直接提交，如果有错误就回滚快照，没问题就直接删除快照<br>结构图：<br><img src="https://img2.imgtp.com/2024/05/19/248EPtnh.png" /></p><p>缺陷：一致性弱，其中一个事务提交在回滚前会被其他事务调用，产生数据的不一致</p><ol><li>给需要回滚的数据表格添加undo_log表<img src="https://img2.imgtp.com/2024/05/19/J8J60t38.png" /></li><li>修改模式<br>将XA改为TA</li><li>重启项目</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验4_web页面广告制作</title>
      <link href="/2024/04/27/shiyan4/"/>
      <url>/2024/04/27/shiyan4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">closeCouplet</span>(<span class="params">coupletId</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取标签</span></span><br><span class="line">    <span class="keyword">let</span> couplet = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(coupletId);</span><br><span class="line">    <span class="comment">// 将标签隐藏,设置为空</span></span><br><span class="line">    couplet.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义变量用于保存定时器</span></span><br><span class="line"><span class="keyword">let</span> intervalId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次调用 setInterval 定时器</span></span><br><span class="line"><span class="title function_">startInterval</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startInterval</span>(<span class="params"></span>) &#123;</span><br><span class="line">    intervalId = <span class="built_in">setInterval</span>(down, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">down</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取广告标签</span></span><br><span class="line">    <span class="keyword">let</span> down = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;couplet-down&#x27;</span>);</span><br><span class="line">    <span class="comment">// 获取广告标签样式</span></span><br><span class="line">    <span class="keyword">let</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(down);</span><br><span class="line">    <span class="comment">// 广告显现</span></span><br><span class="line">    down.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;flex&#x27;</span>;</span><br><span class="line">    <span class="comment">// 获取广告当前位置</span></span><br><span class="line">    <span class="keyword">let</span> top = <span class="built_in">parseInt</span>(style.<span class="title function_">getPropertyValue</span>(<span class="string">&quot;top&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (top &gt; <span class="number">320</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置图片上移</span></span><br><span class="line">        down.<span class="property">style</span>.<span class="property">top</span> = (top - <span class="number">0.1</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当 top 小于等于 320 时，清除定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>    /* 所有元素都采用弹性布局，水平分布 */    .all {        display: flex;        justify-content: space-between;    }    /* 左侧和右侧对联样式 */    #couplet-left, #couplet-right {        height: 300px;        position: sticky; /* 让页面标签在滚动时固定 */        top: 0;        z-index: 1000; /* 确保在其他内容之上 */    }    /* 左侧和右侧对联的图片样式 */    #img-left, #img-right {        width: 200px;        height: 300px;    }    /* 内容区域样式 */    #content {        width: 800px;        height: 1500px;        background-color: aqua;    }    /* 关闭按钮样式 */    #close-couplet-left, #close-couplet-right,#close-couplet-down {        background-color: black;        color: white;        position: absolute; /* 绝对定位 */        top: 5px;        right: 5px;        border: none; /* 去除边框 */        padding: 5px 10px; /* 上下 5px，左右 10px 的内边距 */        cursor: pointer; /* 设置鼠标样式为手型 */    }    /* 下方对联样式 */    #couplet-down {        position: absolute; /* 绝对定位 */        top: 2300px;        left: 150px;        z-index: 1000; /* 确保在其他内容之上 */    }    /* 下方对联的图片样式 */    #img-down {        width: 200px;        height: 200px;    }</style><div class="all">    <div id="couplet-left">        <img id="img-left" src="https://t.tutu.to/img/t1KQ" alt="">        <button onclick="closeCouplet('couplet-left')" id="close-couplet-left">关闭</button>    </div>    <div id="content">1</div>    <div id="couplet-right">        <img id="img-right" src="https://t.tutu.to/img/trE6" alt=""/>        <button onclick="closeCouplet('couplet-right')" id="close-couplet-right">关闭</button>    </div>    <div id="couplet-down" style="display: none">        <img src="https://t.tutu.to/img/tywq" id="img-down" alt="" />        <button onclick="closeCouplet('couplet-down')" id="close-couplet-down">关闭</button>    </div></div><script>    function closeCouplet(coupletId) {        let couplet = document.getElementById(coupletId);        couplet.style.visibility = 'hidden';    }    let intervalId;    startInterval();    function startInterval() {        intervalId = setInterval(down, 1);    }    function down() {        let down = document.getElementById('couplet-down');        let style = window.getComputedStyle(down);        down.style.display = 'flex';        let top = parseInt(style.getPropertyValue("top"));        if (top > 1000) {            down.style.top = (top - 0.1) + "px";        } else {            clearInterval(intervalId);        }    }</script>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业1,使用循环打印基础图形</title>
      <link href="/2024/04/06/homeWork1/"/>
      <url>/2024/04/06/homeWork1/</url>
      
        <content type="html"><![CDATA[<h1 id="作业1"><a href="#作业1" class="headerlink" title="作业1"></a>作业1</h1><h3 id="使用循环打印基础图形"><a href="#使用循环打印基础图形" class="headerlink" title="使用循环打印基础图形"></a>使用循环打印基础图形</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">5</span>;</span><br><span class="line">number = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&quot;请输入生成的行数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成n个空格</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateSpaces</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> spaces = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        spaces += <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> spaces;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成n个星号</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateStars</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stars = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        stars += <span class="string">&quot;* &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stars;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印等腰三角形</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printTriangle</span>(<span class="params">rows</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> triangle = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> spaces = <span class="title function_">generateSpaces</span>(rows - i);</span><br><span class="line">        <span class="keyword">let</span> stars = <span class="title function_">generateStars</span>(i);</span><br><span class="line">        triangle += spaces + stars + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;pre&gt;&quot;</span> + triangle + <span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印平行四边形</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printParallelogram</span>(<span class="params">rows</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> parallelogram = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> spaces = <span class="title function_">generateSpaces</span>(rows - i);</span><br><span class="line">        <span class="keyword">let</span> stars = <span class="title function_">generateStars</span>(rows);</span><br><span class="line">        parallelogram += spaces + stars + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;pre&gt;&quot;</span> + parallelogram + <span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印菱形</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printDiamond</span>(<span class="params">rows</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> midRow = <span class="title class_">Math</span>.<span class="title function_">floor</span>(rows / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> diamond = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 打印上半部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; midRow; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> spaces = <span class="title function_">generateSpaces</span>(<span class="number">2</span> * midRow - <span class="number">2</span> * i);</span><br><span class="line">        <span class="keyword">let</span> stars = <span class="title function_">generateStars</span>(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        diamond += spaces + stars + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印中间行</span></span><br><span class="line">    <span class="keyword">if</span>(rows%<span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        rows++;</span><br><span class="line">    &#125;</span><br><span class="line">    diamond += <span class="title function_">generateStars</span>(rows) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印下半部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = midRow - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">let</span> spaces = <span class="title function_">generateSpaces</span>(<span class="number">2</span> * midRow - <span class="number">2</span> * i);</span><br><span class="line">        <span class="keyword">let</span> stars = <span class="title function_">generateStars</span>(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        diamond += spaces + stars + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;pre&gt;&quot;</span> + diamond + <span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用打印函数</span></span><br><span class="line"><span class="title function_">printTriangle</span>(number);</span><br><span class="line"><span class="title function_">printParallelogram</span>(number);</span><br><span class="line"><span class="title function_">printDiamond</span>(number);</span><br><span class="line"></span><br></pre></td></tr></table></figure><script>let number = 5;number = window.prompt("请输入生成的行数")// 生成n个空格function generateSpaces(n) {    let spaces = "";    for (let i = 0; i < n; i++) {        spaces += " ";    }    return spaces;}// 生成n个星号function generateStars(n) {    let stars = "";    for (let i = 0; i < n; i++) {        stars += "* ";    }    return stars;}// 打印等腰三角形function printTriangle(rows) {    let triangle = "";    for (let i = 1; i <= rows; i++) {        let spaces = generateSpaces(rows - i);        let stars = generateStars(i);        triangle += spaces + stars + "\n";    }    document.write("<pre>" + triangle + "</pre>");}// 打印平行四边形function printParallelogram(rows) {let parallelogram = "";for (let i = 1; i <= rows; i++) {let spaces = generateSpaces(rows - i);let stars = generateStars(rows);parallelogram += spaces + stars + "\n";}document.write("<pre>" + parallelogram + "</pre>");}// 打印菱形function printDiamond(rows) {let midRow = Math.floor(rows / 2);let diamond = "";// 打印上半部分for (let i = 0; i < midRow; i++) {let spaces = generateSpaces(2 * midRow - 2 * i);let stars = generateStars(i * 2 + 1);diamond += spaces + stars + "\n";}// 打印中间行if(rows%2 === 0){rows++;}diamond += generateStars(rows) + "\n";    // 打印下半部分    for (let i = midRow - 1; i >= 0; i--) {        let spaces = generateSpaces(2 * midRow - 2 * i);        let stars = generateStars(i * 2 + 1);        diamond += spaces + stars + "\n";    }    document.write("<pre>" + diamond + "</pre>");}// 调用打印函数printTriangle(number);printParallelogram(number);printDiamond(number);</script>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作业2，闭包</title>
      <link href="/2024/04/06/homeWork2/"/>
      <url>/2024/04/06/homeWork2/</url>
      
        <content type="html"><![CDATA[<h2 id="作业2"><a href="#作业2" class="headerlink" title="作业2"></a>作业2</h2><h3 id="简单的闭包的实现"><a href="#简单的闭包的实现" class="headerlink" title="简单的闭包的实现"></a>简单的闭包的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ++num;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = <span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>RabbitMQ笔记</title>
      <link href="/MQ-Notes.html"/>
      <url>/MQ-Notes.html</url>
      
        <content type="html"><![CDATA[<h2 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h2><p>任务队列，一个队列绑定多个消费者，没配置前队列中的消息被消费者平均分配</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次获取1条消息，处理完了才能获取下一条</span></span><br></pre></td></tr></table></figure><p>通过上面的配置，就使得普通队列会通过消费者的处理快慢来分配任务</p><h2 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h2><p>消息传递到交换机后，会发送给每一个队列</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>构建交换机</li><li>构建队列</li><li>绑定交换机和队列</li><li>在消费者中监听队列</li></ol><h2 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h2><p>消息传递给交换机后，根据规则指定发送给固定的queue，被称为定向路由<br>步骤和FanoutExchange 一致，只是构建队列时需要指定对应的routingkey,发送消息时也要指定对应key。<br>一个队列可以有多个key</p><h2 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h2><p>key的设置有通配符的参与。<br>key与通配符使用 “.” 分割开，#代表0或者多个单词，*代表一个单词</p><h2 id="基于注解开发"><a href="#基于注解开发" class="headerlink" title="基于注解开发"></a>基于注解开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;hmall.direct&quot;,type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;,&quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到了消息:&quot;</span>+msg+ LocalTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h2><p>依赖的引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">&lt;!--Jackson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>装配bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jacksonMessageConvertor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>编码时遇到的错误</title>
      <link href="/errorNotes.html"/>
      <url>/errorNotes.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/link.html"/>
      <url>/link/link.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/config/css/homeWork8.css"/>
      <url>/config/css/homeWork8.css</url>
      
        <content type="html"><![CDATA[body {    background: url("https://img2.imgtp.com/2024/05/21/CP7YxrlN.jpg");    background-size: cover;    margin: 0;    padding: 0;}.div {    background: rgb(0, 0, 0, 1) url("https://img2.imgtp.com/2024/05/21/gqsxWUC3.png");    width: 500px;    height: 500px;    border: 1px solid #333;    border-radius: 5px;    text-align: center;    margin: 200px auto auto;}.div p {    padding: 30px 0;    font-size: 30px;}.ul {    width: 100%;    padding: 0;    list-style: none;}.ul li {    display: flex;    justify-content: center;    align-items: center;    margin: 10px 0;}.ul li span {    width: 80px;    text-align: right;}.ul li input {    width: 228px;    height: 30px;    border: 1px solid #333;    border-radius: 3px;    padding-left: 20px;    outline: none;    margin-left: 10px;}.ul li button {    color: #ffffff;    background-color: aqua;    font-size: 16px;    padding: 10px 60px;    outline: inherit;    border: none;    border-radius: 3px;    cursor: pointer;    margin: 20px 0;}.user_hint,.password_hint,.confirm_hint,.email_hint,.mobile_hint {    margin-left: 10px;    font-size: 16px;}]]></content>
      
    </entry>
    
    
  
</search>
